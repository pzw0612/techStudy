synchronized关键字使用要注意以下几点：

1）、只能同步方法和代码块，而不能同步变量和类。只要保护好类中数据的安全访问和设置就可以了，不需要对类使用synchronized关键字，所以Java不允许这么做。并且想要同步数据，只需要对成员变量私有化，然后同步方法即可，不需要对成员变量使用synchronized，java也禁止这么做。

2）、每个对象只有一个同步锁；当提到同步时，应该清楚在什么上同步？也就是说，在哪个对象上同步？上面的代码中run方法使用synchronized (account)代码块，因为两个线程访问的都是同一个Account对象，所以能够锁定。但是如果是其他的一个无关的对象，就没用了。比如说synchronized (new Date())代码块，一样没有效果。

3）、不必同步类中所有的方法，类可以同时拥有同步和非同步方法。

4）、如果两个线程要执行一个类中的synchronized方法，并且两个线程使用相同的实例来调用方法，那么一次只能有一个线程能够执行方法，另一个需要等待，直到锁被释放。也就是说：如果一个线程在对象上获得一个锁，就没有任何其他线程可以进入（该对象的）类中的任何一个同步方法。

5）、如果线程拥有同步和非同步方法，则非同步方法可以被多个线程自由访问而不受锁的限制。

6）、线程睡眠时，它所持的任何同步锁都不会释放。

7）、线程可以获得多个同步锁。比如，在一个对象的同步方法里面调用另外一个对象的同步方法，则获取了两个对象的同步同步锁。

8）、同步损害并发性，应该尽可能缩小同步范围。同步不但可以同步整个方法，还可以同步方法中一部分代码块。

9）、编写线程安全的代码会使系统的总体效率会降低，要适量使用



一个线程取得了同步锁，那么在什么时候才会释放掉呢？

1、同步方法或代码块正常结束

2、使用return或 break终止了执行，或者跑出了未处理的异常。

3、当线程执行同步方法或代码块时，程序执行了同步锁对象的wait()方法。